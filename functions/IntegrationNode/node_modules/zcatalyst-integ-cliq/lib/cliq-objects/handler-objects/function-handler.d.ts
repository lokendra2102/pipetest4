import { Access, Button, Chat, Environment, FormRequestParam, FormTarget, MessageObject, User, ButtonObject } from '../common.js';
import HandlerResponse from '../response-objects/handler-response.js';
import FormChangeResponse from '../response-objects/form-change-response.js';
import FormDynamicFieldResponse from '../response-objects/form-dynamic-field-response.js';
import WidgetResponse from '../response-objects/widget-response.js';
interface FunctionRequest {
    name: string;
    user: User;
    chat: Chat;
    message: MessageObject;
}
interface ButtonFunctionRequest extends FunctionRequest {
    arguments: Record<string, unknown>;
    target: Button;
}
interface FormFunctionRequest extends FunctionRequest {
    form: FormRequestParam;
    target: FormTarget;
}
interface WidgetFunctionRequest extends Omit<FunctionRequest, 'chat' | 'message'> {
    target: ButtonObject;
    access: Access;
    environment: Environment;
}
export default class FunctionHandler {
    buttonFunctionHandler(handler: (req: ButtonFunctionRequest, res: HandlerResponse, ...args: Array<unknown>) => Promise<unknown>): void;
    formSubmitHandler(handler: (req: FormFunctionRequest, res: HandlerResponse, ...args: Array<unknown>) => Promise<unknown>): void;
    formChangeHandler(handler: (req: FormFunctionRequest, res: FormChangeResponse, ...args: Array<unknown>) => Promise<typeof res | undefined>): void;
    formDynamicFieldHandler(handler: (req: FormFunctionRequest, res: FormDynamicFieldResponse, ...args: Array<unknown>) => Promise<typeof res | undefined>): void;
    widgetButtonHandler(handler: (req: WidgetFunctionRequest, res: WidgetResponse, ...args: Array<unknown>) => Promise<unknown>): void;
    newHandlerResponse(): HandlerResponse;
    newFormChangeResponse(): FormChangeResponse;
    newFormDynamicFieldResponse(): FormDynamicFieldResponse;
    newWidgetResponse(): WidgetResponse;
}
export {};
