import ButtonObject from './button-object.js';
export default class WidgetResponse {
    constructor() {
        this.type = 'applet';
    }
    newWidgetTab(id, label) {
        return new WidgetTab(id, label);
    }
    addTab(...tab) {
        if (this.tabs === undefined) {
            this.tabs = tab;
            return this.tabs.length;
        }
        return this.tabs.push(...tab);
    }
    newWidgetSection() {
        return new WidgetSection();
    }
    addSection(...WidgetSection) {
        if (this.sections === undefined) {
            this.sections = WidgetSection;
            return this.sections.length;
        }
        return this.sections.push(...WidgetSection);
    }
    newWidgetInfo() {
        return new WidgetInfo();
    }
}
class WidgetElement {
    newWidgetButton() {
        return new WidgetButton();
    }
    addWidgetButton(...button) {
        if (this.buttons === undefined) {
            this.buttons = button;
            return this.buttons.length;
        }
        return this.buttons.push(...button);
    }
    newButtonObject() {
        return new ButtonObject();
    }
    addButtonReference(name, button) {
        if (this.button_references === undefined) {
            this.button_references = {};
        }
        this.button_references[name] = button;
    }
    newWidgetElementStyle() {
        return new WidgetElementStyle();
    }
}
class WidgetSection {
    newWidgetElement() {
        return new WidgetElement();
    }
    addElement(...element) {
        if (this.elements === undefined) {
            this.elements = element;
            return this.elements.length;
        }
        return this.elements.push(...element);
    }
}
class WidgetTab {
    constructor(id, label) {
        this.label = label;
        this.id = id;
    }
}
class WidgetButton {
    setApi(api, id) {
        this.api = api.replace('{{id}}', id);
    }
}
class WidgetElementStyle {
    addWidth(...width) {
        if (this.width === undefined) {
            this.width = width;
            return this.width.length;
        }
        return this.width.push(...width);
    }
    addAlignment(...alignment) {
        if (this.align === undefined) {
            this.align = alignment;
            return this.align.length;
        }
        return this.align.push(...alignment);
    }
}
class WidgetInfo {
    newWidgetButton() {
        return new WidgetButton();
    }
}
